Fictitiuous Version 3 model

gen_capacity =[0.1,0.1, 10]
# gen_capacity =[50000, 50000, 50000]

random.seed(42)

# Time Horizon
NO_prosumers=100
horizon=24
H = range(16,horizon+16)    
MVA = 1  # Power Base
PU_DA = 1/(1000*MVA)

# Number of strategies
no_strategies = 100 

nl = 3    # Number of network lines
nb = 3    # Number of network buses

FromBus = [1,1,2] # Vector with network lines' "sending buses"
ToBus = [2,3,3]   # Vector with network lines' "receiving buses"

LinesSusc = [100,125,150]  #Vector with per unit susceptance of the network 
# LinesSusc = [5,6,7]

ng = 3    # Number of Generators
ncda = 2  # Number of competing 

GenBus = [1,1,3]  # Vector with Generation Buses
CDABus = [[2, 3], [1,3], [1,2]]      # Vector with competing DAs Buses
DABus = 1           # DA Bus

FMAX = [50, 50, 50]
# FMAX = [50000, 50000, 50000] # Vector with Capacities of Network Lines in pu
FMAX = [i/MVA for i in FMAX]

no_iteration = 1000
epsilon= 0.001
# distance between current iteration and it's prevoius probabilities
# FOR every bid "b" in D: Set the probability_of_b  = (times that "b" was played in epochs 901 - 1000) / 100
# Set the PREVIOUS_probability_of_b = (times that "b" was played in epochs 851 - 950) / 100
# then:
# IF for every bid "b" in D, it is:
#       | probability_of_b - PREVIOUS_probability_of_b | < epsilon   
#            THEN we say that the algorithm has converged to an epsilon-CCEquilibrium 
distance = 100
infeasibility_counter=0
infeasibility_counter_DA =[0,0,0]
objective_function = dict()


make_epsilon_discrete_value(0.05)
